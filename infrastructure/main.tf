data "aws_iam_policy_document" "instance_assume_role_policy" {
  statement {
    actions = ["sts:AssumeRole"]

    principals {
      type        = "Service"
      identifiers = ["lambda.amazonaws.com",
                    "scheduler.amazonaws.com"]
    }
  }
}

resource "aws_iam_role" "iam_for_lambda" {
  name = "vulnerability-scanning"
  assume_role_policy = data.aws_iam_policy_document.instance_assume_role_policy.json
  managed_policy_arns = [
    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
    "arn:aws:iam::aws:policy/AmazonSSMFullAccess",
    "arn:aws:iam::aws:policy/CloudWatchFullAccess",
    "arn:aws:iam::aws:policy/AWSLambda_FullAccess",
    "arn:aws:iam::aws:policy/AmazonEventBridgeFullAccess",
  ]
}

resource "aws_lambda_function" "lambda_func" {
  filename      = "../main.zip"
  function_name = "vulnerability-scanning"
  role          = aws_iam_role.iam_for_lambda.arn
  handler       = "main.lambda_handler"
  source_code_hash = filebase64sha256("../main.zip")
  runtime = "python3.10"
  publish = false #create versions with changes
    tracing_config {
    mode = "Active"
  }
  layers = [ aws_lambda_layer_version.lambda_layer.arn ]
  environment {
    variables = {
      ENVIRONMENT = "nonprod"
      DD_TRACE_ENABLED = "false"
    }
  }
  lifecycle {
    create_before_destroy = true
  }
  tags = {
    Application = "PATCh",
    Environment = "nonprod",
    Team = "PATCh",
    Creator = "terraform-vulnerability-scanning",
    APMId = "BA0001171"
  }
  timeout = 120
  memory_size = 512
}

resource "aws_lambda_layer_version" "lambda_layer" {
  filename   = "./requests.zip"
  layer_name = "requests"
  compatible_architectures = ["x86_64", "arm64"]
  compatible_runtimes = ["python3.9", "python3.10"] 
}

resource "aws_lambda_permission" "allow_eventbridge" {
  statement_id = "AllowExecutionFromCloudWatch"
  action = "lambda:InvokeFunction"
  function_name = aws_lambda_function.lambda_func.function_name
  principal = "events.amazonaws.com"
}

resource "aws_scheduler_schedule" "eb_scheduler" {
  name       = "vulnerability-scanning"
  group_name = "default"

  flexible_time_window {
    mode = "OFF"
  }
  schedule_expression = "rate(10 days)"
  schedule_expression_timezone = "America/Denver"
  
  target {
    arn       = "arn:aws:scheduler:::aws-sdk:lambda:invoke"
    role_arn = aws_iam_role.iam_for_lambda.arn
    input = jsonencode({
      FunctionName = aws_lambda_function.lambda_func.function_name
      InvocationType = "Event"
    })
  }
}
