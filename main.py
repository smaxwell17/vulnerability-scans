import requests
import boto3

# graphql query to find vulnerabilities in gitlab repo
git_body = """
query VulnerabilityFindings {
project(fullPath: %s) {
  pipelines {
    nodes {
      securityReportFindings {
        nodes {
          title
          severity
          state
          scanner {
            externalId
            name
            vendor
          }
          identifiers {
            externalType
            externalId
            name
            url
          }
          uuid
          falsePositive
          description
          location {
            ... on VulnerabilityLocationSast {
              file
              startLine
              endLine
              vulnerableClass
              vulnerableMethod
              blobPath
            }
            ... on VulnerabilityLocationContainerScanning {
              dependency {
                package {
                  name
                }
                version
              }
              image
              operatingSystem
            }
            ... on VulnerabilityLocationDependencyScanning {
              file
              blobPath
              dependency {
                version
              }
            }
          }
          remediations {
            diff
            summary
          }
          solution
          evidence {
            request {
              body
              headers {
                name
                value
              }
              method
              url
            }
          }
        }
      }
    }
  }
}
}""" 

pd_url = 'https://events.pagerduty.com/v2/enqueue'
git_url = "https://gitlab.com/api/graphql"

def lambda_handler(event, context):
  # call parameter store
  client = boto3.client('ssm')
  response = client.get_parameter(Name='/vulnerability-scanning/gitlab-token')
  token = response['Parameter']['Value']
  # retrieve list of all repos in the PATCh gitlab group
  response = client.get_parameter(Name='/gitlab-repos')
  paths = response['Parameter']['Value']
  paths = paths.split(',')

  # loop over repos, checking for vulnerabilities in each one
  for path in paths:
    body = git_body % (f'"ciorg/patch/{path}"')
    response = requests.get(url=git_url, json = {"query": body}, headers={"PRIVATE-TOKEN":token})
    jbody = response.content.decode()
    
    # if a HIGH or CRITICAL severity is found, trigger a Pagerduty alert
    if ('\"severity\":\"HIGH\"' in jbody or '\"severity\":\"CRITICAL\"'in jbody) and ('\"state\":\"RESOLVED\"' not in jbody):
      print("MATCH FOUND")
      # call pagerduty
      repo = path.split("/")[-1]
      title = f'WARNING: Security Vulnerability found for {path}'
      pd_data = """
      {
        "payload": {
            "summary": "%s",
            "severity": "warning",
            "source": "Alert source"
        },
        "routing_key": "79f3342327264805d0d70bc91f814b67",
        "event_action": "trigger"
      }
      """ % title

      pd_response = requests.post(url=pd_url, data=pd_data, headers={"Content-Type":"application/json"})
      pd_response = pd_response.content.decode()
      print(f'response from pagerduty for {repo}: {pd_response}')
